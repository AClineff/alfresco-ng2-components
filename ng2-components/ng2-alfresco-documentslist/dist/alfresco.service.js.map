{"version":3,"sources":["alfresco.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAOA;gBACI,yBAAoB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;oBAEtB,UAAK,GAAW,uBAAuB,CAAC;oBACxC,iBAAY,GAAW,sDAAsD,CAAC;gBAHrD,CAAC;gBAKlC,sBAAW,iCAAI;yBAAf;wBACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;oBACtB,CAAC;yBAED,UAAgB,KAAY;wBACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACvB,CAAC;;;mBAJA;gBAMO,oCAAU,GAAlB;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC;gBACzC,CAAC;gBAED,mCAAS,GAAT,UAAU,MAAc;oBACpB,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC;wBACtB,cAAc,EAAE,kBAAkB;wBAClC,eAAe,EAAE,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC;qBAClD,CAAC,CAAC;oBACH,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;oBACvD,MAAM,CAAC,IAAI,CAAC,IAAI;yBACX,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,MAAM,EAAE,OAAO,CAAC;yBACxC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAe,GAAG,CAAC,IAAI,EAAE,EAAzB,CAAyB,CAAC;yBACrC,EAAE,CAAC,UAAA,IAAI,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAjB,CAAiB,CAAC,CAAC,iCAAiC;yBAC/D,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACjC,CAAC;gBAED,iDAAuB,GAAvB,UAAwB,QAAwB;oBAC5C,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,6BAA6B,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,mEAAmE,CAAC;gBACnK,CAAC;gBAED,uCAAa,GAAb,UAAc,QAAwB;oBAClC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,oBAAoB,GAAG,QAAQ,CAAC,UAAU,CAAC;gBACnE,CAAC;gBAEO,qCAAW,GAAnB,UAAqB,KAAe;oBAChC,mFAAmF;oBACnF,4CAA4C;oBAC5C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACrB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,cAAc,CAAC,CAAC;gBAClE,CAAC;gBA7CL;oBAAC,iBAAU,EAAE;;mCAAA;gBA8Cb,sBAAC;YAAD,CA7CA,AA6CC,IAAA;YA7CD,6CA6CC,CAAA","file":"alfresco.service.js","sourcesContent":["import {Injectable} from 'angular2/core';\nimport {Http, Response, RequestOptions, Headers} from 'angular2/http';\nimport {Observable} from 'rxjs/Observable';\nimport {FolderEntity} from \"./core/entities/folder.entity\";\nimport {DocumentEntity} from \"./core/entities/document.entity\";\n\n@Injectable()\nexport class AlfrescoService {\n    constructor(private http: Http) {}\n\n    private _host: string = 'http://127.0.0.1:8080';\n    private _baseUrlPath: string = '/alfresco/service/slingshot/doclib/doclist/all/site/';\n\n    public get host():string {\n        return this._host;\n    }\n\n    public set host(value:string) {\n        this._host = value;\n    }\n\n    private getBaseUrl():string {\n        return this.host + this._baseUrlPath;\n    }\n\n    getFolder(folder: string) {\n        let headers = new Headers({\n            'Content-Type': 'application/json',\n            'Authorization': 'Basic ' + btoa('admin:admin')\n        });\n        let options = new RequestOptions({ headers: headers });\n        return this.http\n            .get(this.getBaseUrl() + folder, options)\n            .map(res => <FolderEntity> res.json())\n            .do(data => console.log(data)) // eyeball results in the console\n            .catch(this.handleError);\n    }\n\n    getDocumentThumbnailUrl(document: DocumentEntity) {\n        return this._host + '/alfresco/service/api/node/' + document.nodeRef.replace('://', '/') + '/content/thumbnails/doclib?c=queue&amp;ph=true&amp;lastModified=1';\n    }\n\n    getContentUrl(document: DocumentEntity) {\n        return this._host + '/alfresco/service/' + document.contentUrl;\n    }\n\n    private handleError (error: Response) {\n        // in a real world app, we may send the error to some remote logging infrastructure\n        // instead of just logging it to the console\n        console.error(error);\n        return Observable.throw(error.json().error || 'Server error');\n    }\n}\n"],"sourceRoot":"/source/"}